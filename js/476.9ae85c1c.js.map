{"version":3,"file":"js/476.9ae85c1c.js","mappings":"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","sources":["webpack://gimko/./node_modules/vue-loader/dist/exportHelper.js","webpack://gimko/./src/classes/personPointer.js","webpack://gimko/./src/components/TreeView.vue","webpack://gimko/./src/components/TreeView.vue?9d32"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n","export default class personPointer {\n    constructor (person, before, isSpouse = false) {\n        this.person = person;\n        this.before = before;\n        this.isSpouse = isSpouse;\n    }\n}","<script setup>\n    import db from '@/firebase/init';\n    import { getAuth } from 'firebase/auth';\n    import { doc, getDoc, updateDoc } from 'firebase/firestore';\n    import { onMounted, ref } from 'vue';\n    import { useRouter } from 'vue-router';\n    import personPointer from '@/classes/personPointer.js';\n    import { defaultTreePerson, defaultPersonArticle } from '@/firebase/defaultStructs';\n\n    const router = useRouter();\n    const tid = router.currentRoute.value.params.id; // ID of current tree\n\n    const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n    const tPersonMarginH = 20;\n    const tPersonMarginV = 20;\n    const tPersonWidth = 160;\n    const tPersonHeight = 80; \n    const tPersonPaddingH = 20;\n    const tPersonPaddingV = 20; \n    let offsetX = ref(0); // The pan offset\n\n    const ftreePoses = ref([]);\n\n    const personFormat = structuredClone(defaultTreePerson);\n    let currentPID;\n    let biggestPID;\n\n    let auth = getAuth();\n\n    // Get current tree\n    let tree = ref();\n    const getTree =  async () => {\n        console.log(\"Getting Tree\");\n        const treeDoc = await getDoc(doc(db, \"trees\", tid));\n        if (treeDoc.exists()) {\n            console.log(\"Tree found!\");\n            tree.value = treeDoc.data();\n            \n            // Set biggest PID\n            biggestPID = 0;\n            tree.value.people.forEach(person => {\n                if (person.id >= biggestPID) {\n                    biggestPID = person.id;\n                }\n            });\n\n            console.log(tree.value.people);\n            \n            // Set dates\n            // tree.value.people.forEach(person => {\n            //     person.dob = new Date(person.dob);\n            //     person.dod = new Date(person.dod);\n            // });\n\n            // Make tree\n            refreshTree();\n        } else {\n            console.log(\"Tree not found!\");\n            alert(\"Tree not found!\");\n            router.back();\n        }\n    };\n\n    // Set the tree\n    const updateTree = async () => {\n        if (tree.value) {\n            const treeDoc = doc(db, \"trees\", tid);\n            let formattedTree = structuredClone(tree.value);\n            // Format tree to json\n            formattedTree.people.forEach(person => {\n                // person.dob = person.dob.toJSON();\n                // person.dod = person.dod.toJSON();\n            });\n\n            // Update tree document\n            await updateDoc(treeDoc, formattedTree)\n            .then(() => {\n                console.log(\"Tree update success!\");\n                showError(\"Saglabāts sekmīgi!\")\n            })\n            .catch(() => {\n                console.log(\"Tree update failed!\");\n                showError(\"Neizdevās saglabāt!\")\n            });\n        }\n    }\n\n    // Get person object from ID\n    /**\n        * Arguments can be INT or ARRAY\n    */\n    const getPerson = (ID) => {\n        if (typeof ID == \"object\") {\n            let arr = [];\n            ID.forEach(id => {\n                if (id == null) {\n                    arr.push(null);\n                    return arr;\n                } else {\n                    const person = tree.value.people.find(p => p.id == id);\n                    arr.push(tree.value.people.find(p => p.id == id));\n                }\n            });\n            return arr;\n        } else {\n            return tree.value.people.find(p => p.id == ID);\n        }\n    };\n\n    // Get the depth of a person\n    const getDepth = (startPerson) => {\n        let depth = 0;\n        \n        let peopleToCheck = [startPerson];\n        // let parentsToCheck = [...getPerson(startPerson.parents)];\n        // let spousesToCheck = [...getPerson(startPerson.spouses)];\n\n        let checkedPeople = [];\n        let peoplePointers = [];\n\n        let failsafe = 0; // DEBUG\n        while (peopleToCheck.length != 0) {\n            const checkPeople = [...peopleToCheck];\n            peopleToCheck = [];\n            // Check people\n            checkPeople.forEach(person => {\n                // Check parents\n                getPerson(person.parents).forEach(parent => {\n                    // Trace if null\n                    if (parent == null) {\n                        let pdepth = 0;\n                        let tracePerson = person;\n                        // Trace depth\n                        while (tracePerson != startPerson) {\n                            const pointer = peoplePointers.find(p => p.person == tracePerson);\n                            tracePerson = pointer.before;\n                            if (!pointer.isSpouse) {\n                                pdepth++;\n                            }\n                        }\n                        // Set depth\n                        if (pdepth > depth) {\n                            depth = pdepth;\n                        }\n                    } else if (!checkedPeople.includes(parent)) {\n                        peoplePointers.push(new personPointer(parent, person));\n                        peopleToCheck.push(parent);\n                    }\n                });\n\n                // Check spouses\n                getPerson(person.spouses).forEach(spouse => {\n                    if (!checkedPeople.includes(spouse)) {\n                        peoplePointers.push(new personPointer(spouse, person, true));\n                        peopleToCheck.push(spouse);\n                    }\n                });\n\n                // Add to checked\n                checkedPeople.push(person);\n            });\n            failsafe++;\n            if (failsafe > 1000) {\n                break;\n            }\n        }\n\n        return depth;\n    };\n\n    // Clalculate tree depth\n    const treeDepth = ref(0);\n    const calcTreeDepth = () => {\n        let depth = 0;\n        tree.value.people.forEach(person => {\n            const pdepth = getDepth(person) + 1;\n            if (pdepth > depth) {\n                depth = pdepth;\n            }\n        });\n        treeDepth.value = depth;\n        // console.log(\"Tree depth:\" + depth);\n    };\n    \n    // Make full tree\n    let ftree = ref();\n    const makeTree = () => {\n        if (tree.value.people.length == 0) {\n            ftree.value = [];\n            return;\n        }\n        ftree.value = [];\n        for (let i = 0; i < treeDepth.value; i++) {\n            ftree.value.push([]);\n        }\n        tree.value.people.forEach((person) => {\n            ftree.value[getDepth(person)].push(person);\n        });\n        sortGen();\n        // console.log(ftree.value);\n    }\n\n    // Refresh tree\n    const refreshTree = () => {\n        ftreePoses.value = [];\n        tree.value.people.forEach((person, i) => {\n            ftreePoses.value.push({\n                pid: person.id,\n                layer: null,\n                index: null,\n                x: null,\n                y: null,\n            });\n        });\n        calcTreeDepth();\n        makeTree();\n        calcTreeWidth();\n        closePersonInfo();\n\n    };\n\n    // Sort generation by spuoses\n    const sortGen = () => {\n        if (ftree.value) {\n            let newFTree = [];\n\n            // OLD\n            let lastGen = null;\n            ftree.value.forEach(gen => {\n                newFTree.push([]);\n                const last = newFTree.length - 1;\n                \n                // Sort by spuoses\n                let checkedIDs = [];\n                gen.forEach(person => {\n                    if (!checkedIDs.includes(person.id)) {\n                        newFTree[last].push(person);\n                        checkedIDs.push(person.id);\n                        person.spouses.forEach(spuose => {\n                            newFTree[last].push(getPerson(spuose));\n                            checkedIDs.push(spuose);\n                        });\n                    }\n                });\n\n                // Align with parents\n                if (lastGen) {\n                    // Sort by families (With primary person in first)\n                    let families = [];\n                    let i = 0;\n                    while (i < newFTree[last].length) {\n                        // Get primary person\n                        let j = i;\n                        let primPers = newFTree[last][j];\n                        while (primPers.primaryParents.length == 0) {\n                            primPers = newFTree[last][j];\n                            j++;\n                        }\n\n                        families.push([primPers]);\n                        primPers.spouses.forEach(s => {\n                            families[families.length-1].push(getPerson(s));\n                        });\n\n                        i += primPers.spouses.length + 1;\n                    }\n\n                    // Align with parents\n                    newFTree[last] = [];\n                    // NEW\n                    i = 0;\n                    while (i < lastGen.length) {\n                        const parent = lastGen[i];\n                        let familyIndex = 1;\n                        // Different cases for adopted people\n                        if (parent.primaryParents.length > 0) { // Add adopted people (If parent is main)\n                            while (familyIndex > -1) {\n                                familyIndex = families.findIndex(f => f[0].primaryParents[0] == -1 && f[0].primaryParents[1] == parent.id);\n                                if (familyIndex > -1) {\n                                    // Move primary to middle of family\n                                    const primPers = families[familyIndex][0];\n                                    families[familyIndex][0] = families[familyIndex][Math.floor((families[familyIndex].length - 1) / 2)];\n                                    families[familyIndex][Math.floor((families[familyIndex].length - 1) / 2)] = primPers;\n\n                                    // Add family to gen\n                                    newFTree[last].push(...families[familyIndex]);\n                                    families.splice(familyIndex, 1);\n                                }\n                            }\n                        } else { // If parent is a spouse\n                            while (familyIndex > -1) {\n                                familyIndex = families.findIndex(f => f[0].primaryParents[0] == parent.id);\n                                if (familyIndex > -1) {\n                                    // Move primary to middle of family\n                                    const primPers = families[familyIndex][0];\n                                    families[familyIndex][0] = families[familyIndex][Math.floor((families[familyIndex].length - 1) / 2)];\n                                    families[familyIndex][Math.floor((families[familyIndex].length - 1) / 2)] = primPers;\n\n                                    // Add family to gen\n                                    newFTree[last].push(...families[familyIndex]);\n                                    families.splice(familyIndex, 1);\n                                }\n                            }\n                        }\n                        i++;\n                    }\n\n                }\n\n                lastGen = newFTree[last];\n            });\n            ftree.value = newFTree;\n        }\n        // console.log(ftree.value);\n        // console.log(tree.value);\n    };\n\n    // Add a person to tree\n    const newPerson = ref(structuredClone(personFormat));\n    /** Adds ID, person as parent to it's children, person as spouse to it's spouses */\n    const addPerson = (personObj) => {\n        if (personObj.name == \"\") {\n            personObj.name = \"New person\";\n        }\n        // Set date\n        // personObj.dob = new Date(personObj.dob);\n        // personObj.dod = new Date(personObj.dod);\n        \n        // Set new id\n        personObj.id = biggestPID + 1;\n        biggestPID++;\n\n        // Add person to tree\n        tree.value.people.push(structuredClone(personObj));\n        // console.log(tree.value.people); // Log tree\n\n        // Reset person variable\n        newPerson.value = structuredClone(personFormat);\n\n        // Refresh\n        refreshTree();\n    };\n\n    // Remove a person from the tree\n    const removePID = ref();\n    const removePerson = (pid) => {\n        let person = getPerson(pid);\n\n        // If person is primary\n        if (person.primaryParents.length > 1) {\n            // Move children up to first parent\n            let primParent = getPerson(person.primaryParents[1]);\n\n            // Set parent for children\n            getPerson(person.children).forEach(child => {\n                // Remove person as parent\n                child.parents.splice(child.parents.indexOf(person.id), 1);\n\n                // Add parents to child\n                child.parents.push(...person.parents);\n\n                // Set primary parents to adopted\n                child.primaryParents[0] = -1;\n                child.primaryParents[1] = primParent.id;\n            });\n\n            // Add children to person's parent\n            primParent.children.push(...person.children);\n\n            // Remove person from parent\n            primParent.children.splice(primParent.children.indexOf(person.id), 1);\n\n            // Move spouses up\n            primParent.spouses.push(...person.spouses);\n            getPerson(person.spouses).forEach(spouse => {\n                // Remove person\n                spouse.spouses.splice(spouse.spouses.indexOf(person.id), 1);\n                // Add parent as spouse\n                spouse.spouses.push(...primParent.spouses);\n            });\n\n            // Add spouses to parent spouses (all other parents)\n            getPerson(primParent.spouses).forEach(spouse => {\n                spouse.spouses.push(...person.spouses);\n            });\n\n        } else if (person.primaryParents.length > 0) { // If person is primary AND is at top of tree\n            if (person.children.length > 1) {\n                console.error(\"Can't remove first main person, if has > 1 child!\");\n                showError(\"Nevar dzēst pirmo koka personu, ja tam ir vairāki bērni!\");\n                return false;\n            } else if (person.children.length == 1) {\n                // Configure child\n                let child = getPerson(person.children[0])\n\n                // Remove parents\n                child.parents = [null];\n                child.primaryParents = [-1];\n\n                // Add spouses\n                child.spouses.push(...person.spouses);\n            }\n        } else { // If person is a spouse (isn't primary)\n            // Remove from spouses\n            getPerson(person.spouses).forEach(spouse => {\n                spouse.spouses.splice(spouse.spouses.indexOf(person.id), 1);\n            });\n\n            // Remove from children\n            getPerson(person.children).forEach(child => {\n                child.parents.splice(child.parents.indexOf(person.id), 1);\n                // Make child to adopted\n                if (child.primaryParents[0] == person.id) {\n                    child.primaryParents[0] = -1;\n                }\n            });\n        }\n\n        // Remove from tree\n        tree.value.people.splice(tree.value.people.indexOf(person), 1);\n        \n        // Refresh tree\n        refreshTree();\n    }\n\n    // Confirm a edit\n    const confirmEdit = () => {\n        // Overwrite\n        tree.value.people[tree.value.people.indexOf(getPerson(editedPerson.value.id))] = editedPerson.value;\n        // console.log(tree.value.people);\n\n        console.log(\"Person edit success!\");\n        // Refresh tree\n        closePersonInfo();\n        refreshTree();\n    };\n\n    // Select a person type to add\n    const adddingPerson = ref(false);\n    const selectNewPersonType = (pid) => {\n        currentPID = pid;\n        adddingPerson.value = true;\n    };\n\n    // Add person of selected type\n    const currentNewPersonType = ref(\"\");\n    const addPersonFromType = (type) => {\n        currentNewPersonType.value = type;\n    };\n\n    // Add a child\n    const addChild = (pid) => {\n        // Check if PID exists\n        if (pid == null) {\n            pid = currentPID;\n        }\n        let person = getPerson(pid);\n\n        // Add the parent's spouses as parents\n        newPerson.value.parents = [pid];\n        person.spouses.forEach(spouseID => {\n            newPerson.value.parents.push(spouseID);\n        });\n\n        // Add as child to parents\n        getPerson(newPerson.value.parents).forEach(parent => {\n            parent.children.push(biggestPID + 1);\n        });\n\n        // Add primary parents\n        newPerson.value.primaryParents.push(currentPID);\n\n        addPerson(newPerson.value);\n    };\n    \n    // Add a spouse\n    const addSpouse = (pid) => {\n        // Check if PID exists\n        if (pid == null) {\n            pid = currentPID;\n        }\n        // Get the person\n        let person = getPerson(pid);\n\n        // Remove parents\n        newPerson.value.primaryParents = [];\n\n        // Add the spuose spuoses as spuoses\n        newPerson.value.spouses = [pid];\n        getPerson(pid).spouses.forEach(spouseID => {\n            newPerson.value.spouses.push(spouseID);\n            getPerson(spouseID).spouses.push(biggestPID+1);\n        });\n\n        // Add spuose's children as children\n        newPerson.value.children = [...person.children];\n\n        // Add spouse as parent to children\n        getPerson(newPerson.value.children).forEach(child => {\n            child.parents.push(biggestPID + 1);\n        });\n\n        person.spouses.push(biggestPID + 1);\n\n        addPerson(newPerson.value);\n    };\n\n    // Add a parent to a person\n    const addParent = (pid) => {\n        // Check if PID exists\n        if (pid == null) {\n            pid = currentPID;\n        }\n        \n        // Get person\n        let person = getPerson(pid);\n\n        // Add person as child\n        newPerson.value.children.push(person.id);\n\n        // If person is the root person\n        if (person.primaryParents.length < 2) {\n            // Set primary parent\n            person.primaryParents.push(biggestPID+1);\n            \n        } else { // If person is a random primary parent (not root)\n            // Configure person parents\n            newPerson.value.parents = [];\n            getPerson(person.parents).forEach(parent => {\n                // Remove old child from parents\n                parent.children.splice(parent.children.indexOf(person.id), 1);\n\n                // Add as child to parents\n                parent.children.push(biggestPID + 1);\n\n                // Add parent\n                newPerson.value.parents.push(parent.id);\n            });\n\n            // Add primary parents\n            newPerson.value.primaryParents.push(person.primaryParents[1]);\n            person.primaryParents[0] = -1;\n            person.primaryParents[1] = biggestPID + 1;\n        }\n\n        // Remove old parents from person\n        person.parents = [biggestPID + 1];\n\n        // Add to tree\n        addPerson(newPerson.value);\n    };\n\n    // Add an article\n    const addArticle = (person) => {\n        person.articles.push(structuredClone(defaultPersonArticle));\n    };\n\n    // Remove an article\n    const removeArticle = (person, index) => {\n        person.articles.splice(index);\n    };\n\n    // Show person info\n    const selectedPerson = ref();\n    const personIsSelected = ref(false);\n    const showPersonInfo = (id) => {\n        selectedPerson.value = tree.value.people.find(p => p.id == id);\n        // console.log(selectedPerson.value);\n        personIsSelected.value = true;\n    };\n\n    // Edit person info\n    const editingPerson = ref(false);\n    const editedPerson = ref();\n    const editPerson = (id) => {\n        closePersonInfo();\n        editedPerson.value = structuredClone(tree.value.people.find(p => p.id == id));\n        editingPerson.value = true;\n    };\n\n    // Close person info\n    const closePersonInfo = () => {\n        personIsSelected.value = false;\n        adddingPerson.value = false;\n        editingPerson.value = false;\n        currentNewPersonType.value = \"\";\n        newPerson.value = structuredClone(personFormat);\n        editedPerson.value = null;\n        removePID.value = null;\n        currentPID = null;\n    };\n\n    // Set person vertical position\n    const setPersonPosV = (pid, i) => {\n        const pos = (\n                        i*(tPersonHeight + tPersonPaddingV*2 + tPersonMarginV*2)\n                        + 200 // Remove offset\n                    );\n        ftreePoses.value.find(p => p.pid == pid).y = pos;\n        ftreePoses.value.find(p => p.pid == pid).layer = i;\n        return pos;\n    }\n\n    // Set person horizontal position\n    const setPersonPosH = (pid, j, gen) => {\n        const pos = (\n            (gen.length - 1) * (tPersonWidth/2 + tPersonPaddingH + tPersonMarginH)\n            - (j)*(tPersonWidth + tPersonPaddingH*2 + tPersonMarginH*2) // Add block offset\n        );\n        ftreePoses.value.find(p => p.pid == pid).x = pos;\n        ftreePoses.value.find(p => p.pid == pid).index = j;\n        return pos;\n    }\n\n    let treeWidthPt = 0;\n    const calcTreeWidth = () => {\n        treeWidthPt = 0;\n        if (ftree.value) {\n            // Get longest gen\n            ftree.value.forEach(gen => {\n                if (gen.length > treeWidthPt) {\n                    treeWidthPt = gen.length;\n                }\n            });\n            treeWidthPt = (\n                (treeWidthPt - 1) * (tPersonWidth/2 + tPersonPaddingH + tPersonMarginH)\n                - (0)*(tPersonWidth + tPersonPaddingH*2 + tPersonMarginH*2) // Add block offset\n            );\n        }\n    };\n\n    // Get a position pair\n    const getPersonPos = (pid) => {\n        return ftreePoses.value.find(p => p.pid == pid);\n    };\n\n    // Show a error message\n    const errorMsg = ref(\"\");\n    const errorMsgDurationMlsc = 2000;\n    const showError = async (errorMessage) => {\n        errorMsg.value = errorMessage;\n        setTimeout(function() {\n            errorMsg.value = \"\";\n        }, errorMsgDurationMlsc);\n    };\n\n    // Check if user has access to tree\n    let hasAccess = ref(false);\n    const checkAccess = async () => {\n        const userDoc = await getDoc(doc(db, \"users\", auth.currentUser.uid));\n        if (userDoc.exists()) {\n            console.log(\"User found!\");\n            if (userDoc.data().trees.includes(tid)) {\n                hasAccess.value = true;\n                console.log(\"Access granted!\");  \n            } else {\n                console.log(\"User doesn't have access!\");\n                alert(\"Jums nav piekļuves šajam kokam!\");\n                router.push(\"/tree\")\n            }\n        } else {\n            console.log(\"User has no document!\");\n        }\n    };\n\n    let mouseDown = 0;\n    window.onmousedown = () => {\n        ++mouseDown;\n    }\n    window.onmouseup = () => {\n        --mouseDown;\n    }\n\n    let lastX;\n    const handleMouseMove = (event) => {\n        if (mouseDown) {\n            const x = event.screenX;\n\n            if (lastX) {\n                let dx = x - lastX;\n                offsetX.value += dx;\n                offsetX.value = clamp(offsetX.value, -treeWidthPt * 2, treeWidthPt * 2)\n                // console.log(offsetX.value);\n            }\n\n            lastX = x;\n        } else {\n            lastX = null;\n        }\n    }\n\n    onMounted(async () => {\n        document.title = \"gimko | Koka skats\";\n        await checkAccess();\n        if (hasAccess.value) {\n            getTree();\n        }\n    });\n\n    document.onmousemove = handleMouseMove;\n</script>\n\n<template>\n    <!-- Checking access -->\n    <div v-if=\"!hasAccess\">\n        <h1>Pārbauda piekļuves atļauju...</h1>\n    </div>\n\n    <!-- Tree view -->\n    <div v-if=\"hasAccess && tree && ftree\" class=\"prevent-select\" style=\"position: relative;\">\n        <h1>{{ tree.name }}</h1>\n\n        <!-- People -->\n        <div class=\"people-tree\" v-if=\"tree.people.length > 0\" :style=\"{ left: offsetX + 'px' }\">\n            <div class=\"tree-gen\" v-for=\"(gen, i) in ftree\">\n                <div class=\"person\" v-for=\"(person, j) in gen\" :style=\"{\n                    width: tPersonWidth + 'pt',\n                    height: tPersonHeight + 'pt',\n                    padding: tPersonPaddingV + 'pt ' + tPersonPaddingH + 'pt',\n                    left: 'calc(50% - ' +\n                        setPersonPosH(person.id, j, gen)\n                     + 'pt)',\n                    top: 'calc(' + setPersonPosV(person.id, i) + 'pt)',\n                }\">\n                    <h2 style=\"position: relative;\" class=\"z-5\" :class=\"(person.primaryParents.length > 0)?'t-bg':'t-text'\">{{ person.name }}</h2>\n                    <div class=\"person-actions\">\n                        <!-- Info view -->\n                        <button class=\"hover-up-p\" @click=\"showPersonInfo(person.id)\">\n                            <p>INFO</p>\n                            <div class=\"bg secondary op-50\"></div>\n                        </button>\n                        <!-- Add (Only for primary) -->\n                        <button v-if=\"person.primaryParents.length > 0\" class=\"hover-up-p\" @click=\"selectNewPersonType(person.id)\"> \n                            <p>PIEVIENOT</p>\n                            <div class=\"bg secondary op-50\"></div>\n                        </button>\n                        <!-- Remove person -->\n                        <button class=\"hover-up-p\" @click=\"() => removePID = person.id\">\n                            <p>DZĒST</p>\n                            <div class=\"bg red op-80\"></div>\n                        </button>\n                    </div>\n\n                    <!-- Draw spouse line -->\n                    <div v-if=\"(person.spouses.length > 0) && ((j == 0) || (!gen[j-1].spouses.includes(person.id)))\" class=\"relation-line-container\">\n                        <hr class=\"relation-line\" v-bind:style=\"{\n                            left: 'calc(50% + ' + (\n                                (person.spouses.length) * (tPersonWidth/2 + tPersonPaddingH + tPersonMarginH)\n                            ) + 'pt)',\n                            top: (\n                                tPersonHeight/2 + tPersonPaddingV\n                            ) + 'pt',\n                            width: (\n                                2 * (person.spouses.length) * (tPersonWidth/2 + tPersonPaddingH + tPersonMarginH)\n                            ) + 'pt',\n                        }\" />\n                    </div>\n\n                    <!-- Draw relation lines -->\n                    <!-- --- NEW --- (Draw actual relations) -->\n                    <!-- Lines are drawn from child to parent (DOWN -> UP) -->\n                    <div v-if=\"person.primaryParents.length > 1\">\n                        <hr class=\"relation-line\" v-bind:style=\"{\n                            left: 'calc(50% + ' + (\n                                -(getPersonPos((person.primaryParents[0] > -1)?person.primaryParents[0]:person.primaryParents[1]).x - getPersonPos(person.id).x)/2\n                            ) + 'pt)',\n                            top: 'calc(' + (\n                            //    -tPersonHeight - 2*tPersonPaddingV - tPersonMarginV\n                                -20\n                            ) + 'pt)',\n                            transform: 'translateX(-50%) rotate(' + (\n                                -Math.atan(\n                                    (2*tPersonMarginV) / \n                                    -(getPersonPos((person.primaryParents[0] > -1)?person.primaryParents[0]:person.primaryParents[1]).x - getPersonPos(person.id).x)\n                                )\n                            ) + 'rad)',\n                            width: Math.sqrt(\n                                ((getPersonPos((person.primaryParents[0] > -1)?person.primaryParents[0]:person.primaryParents[1]).x - getPersonPos(person.id).x))**2 + \n                                (2 * tPersonMarginV)**2\n                            ) + 'pt',\n                        }\" />\n                    </div>\n\n                    <!-- --- OLD --- (draw lines from middle parent) -->\n                    <!-- Lines are drawn from parent to child (UP -> DOWN) -->\n                    <!-- <div v-if=\"(person.spouses.length == 0) || (j == Math.round(gen.indexOf(gen.find(p => p.spouses.includes(person.id))) + gen.find(p => p.spouses.includes(person.id)).spouses.length/2))\">\n                        <hr v-for=\"child in person.children\" class=\"relation-line\" v-bind:style=\"{\n                            left: 'calc(50% + ' + (\n                                -(getPersonPos(child).x - getPersonPos(person.id).x)/2\n                            ) + 'pt)',\n                            top: 'calc(' + (\n                               tPersonHeight + 2*tPersonPaddingV + tPersonMarginV\n                            ) + 'pt)',\n                            transform: 'translateX(-50%) rotate(' + (\n                                -Math.atan(\n                                    (2*tPersonMarginV + 40) / \n                                    (getPersonPos(child).x - getPersonPos(person.id).x)\n                                )\n                            ) + 'rad)',\n                            width: Math.sqrt(\n                                ((getPersonPos(child).x - getPersonPos(person.id).x))**2 + \n                                (2 * tPersonMarginV + 40)**2\n                            ) + 'pt',\n                        }\" />\n                    </div> -->\n\n                    <div class=\"bg z-1\" :class=\"(person.primaryParents.length > 0)?'accent':''\"></div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Person info -->\n        <div class=\"selected-person-info\" v-bind:class=\"(personIsSelected)?'shown':''\">\n            <h2 v-if=\"selectedPerson && selectedPerson.isDeceased\">{{ selectedPerson.name }} ({{ new Date(selectedPerson.dob).getFullYear() }} - {{ new Date(selectedPerson.dod).getFullYear() }})</h2>\n            <h2 v-if=\"selectedPerson && !selectedPerson.isDeceased\">{{ selectedPerson.name }} ({{ new Date(selectedPerson.dob).getFullYear() }})</h2>\n\n            <!-- Articles -->\n            <div v-if=\"selectedPerson\" v-for=\"article in selectedPerson.articles\">\n                <h5>{{ article.title }}</h5>\n                <article >\n                    <p> {{ article.content }} </p>\n                </article>\n            </div>\n\n            <button class=\"edit-button hover-up-p\" @click=\"editPerson(selectedPerson.id)\">\n                <p>REDIĢĒT</p>\n                <div class=\"bg accent op-30\"></div>\n            </button>\n\n            <button class=\"exit-button hover-up-p\" @click=\"closePersonInfo()\">\n                <p>AIZVĒRT</p>\n                <div class=\"bg\"></div>\n            </button>\n        </div>\n\n        <!-- Edit person info -->\n        <div class=\"edit-person-info-container\" v-bind:class=\"(editingPerson)?'shown':''\">\n            <h2>Rediģēt personas info</h2>\n            <!-- Add form -->\n            <div class=\"add-person-form\" v-if=\"editedPerson\">\n                <p>Vārds: <input v-model=\"editedPerson.name\" type=\"text\" /></p> <!-- Name -->\n                <p>Dzimšanas datums: <input v-model=\"editedPerson.dob\" type=\"date\" /></p> <!-- Date of birth -->\n                <p>Vai ir miris? <input type=\"checkbox\" v-model=\"editedPerson.isDeceased\"></p> <!-- Is deceased -->\n                <p v-if=\"editedPerson.isDeceased\">Miršanas datums: <input v-model=\"editedPerson.dod\" type=\"date\" /></p> <!-- Date of death -->\n                <p v-if=\"editedPerson.parents[0] != null\"><label for=\"parents\">Izvēlieties otru vecāku:</label></p> <!-- Select second parent -->\n                <p v-if=\"editedPerson.parents[0] != null\">\n                    <select name=\"parents\" id=\"parents\" v-model=\"editedPerson.primaryParents[0]\">\n                        <option :value=\"-1\">Adoptēts</option>\n                        <option v-for=\"parentID in getPerson(editedPerson.primaryParents[1]).spouses\" :value=\"parentID\" :selected=\"editedPerson.primaryParents[0] == parentID\">\n                            {{ getPerson(parentID).name }}\n                        </option>\n                    </select>\n                </p>\n\n                <!-- Articles -->\n                <h4>Raksti:</h4>\n                <div v-for=\"article, i in editedPerson.articles\">\n                    <p>Virsraksts: <input v-model=\"article.title\" type=\"text\" /></p>\n                    <p><textarea class=\"desc\" v-model=\"article.content\"></textarea></p>\n                    <button class=\"hover-up-p\" style=\"margin: 3pt 0;\" @click=\"removeArticle(editedPerson, i)\">\n                        <p>Noņemt rakstu</p>\n                        <div class=\"bg red op-30\"></div>\n                    </button>\n                </div>\n                \n                <!-- Add article -->\n                <button class=\"hover-up-p\" style=\"margin: 4pt 0;\" @click=\"addArticle(editedPerson)\">\n                    <p>Pievienot rakstu</p>\n                    <div class=\"bg\"></div>\n                </button>\n\n                <!-- Confirm -->\n                <button class=\"hover-up-p\" style=\"float: inline-end;\" @click=\"confirmEdit()\">\n                    <p>Saglabāt</p>\n                    <div class=\"bg op-40\"></div>\n                </button>\n            </div>\n\n            <!-- Exit -->\n            <button class=\"exit-button hover-up-p pos-right-inline\" @click=\"closePersonInfo()\">\n                <p>Aizvērt</p>\n                <div class=\"bg accent\"></div>\n            </button>\n        </div>\n\n        <!-- Select person type -->\n        <div class=\"select-person-type-container\" v-bind:class=\"(currentNewPersonType == '' && adddingPerson)?'shown-0--50':''\">\n            <h4 style=\"text-align: center;\">Select person type</h4>\n\n            <button class=\"select-new-person-button hover-up-p z-1\" @click=\"addPersonFromType('child')\">\n                <p>Bērns</p>\n                <div class=\"bg op-70 secondary\"></div>\n            </button>\n\n            <button class=\"select-new-person-button hover-up-p z-1\" @click=\"addPersonFromType('spouse')\">\n                <p>Dzīvesbiedrs</p>\n                <div class=\"bg op-70 secondary\"></div>\n            </button>\n\n            <button class=\"select-new-person-button hover-up-p z-1\" @click=\"addPersonFromType('parent')\">\n                <p>Vecāks</p>\n                <div class=\"bg op-70 secondary\"></div>\n            </button>\n\n            <button class=\"exit-button hover-up-p z-1\" @click=\"closePersonInfo()\">\n                <p>Aizvērt</p>\n                <div class=\"bg op-80 secondary\"></div>\n            </button>\n\n            <div class=\"bg op-40\"></div>\n        </div>\n\n        <!-- Add person from type -->\n        <div class=\"edit-person-info-container\" v-bind:class=\"(currentNewPersonType != '')?'shown':''\">\n            <h2 v-if=\"currentNewPersonType == 'child'\">Pievienot bērnu</h2>\n            <h2 v-if=\"currentNewPersonType == 'spouse'\">Pievienot dzīvesbiedru</h2>\n            <h2 v-if=\"currentNewPersonType == 'parent'\">Pievienot vecāku</h2>\n            <!-- Add form -->\n            <div class=\"add-person-form\">\n                <p>Vārds: <input v-model=\"newPerson.name\" type=\"text\" /></p> <!-- Name -->\n                <p>Dzimšanas datums: <input v-model=\"newPerson.dob\" type=\"date\" /></p> <!-- Date of birth -->\n                <p>Vai ir miris? <div class=\"checkbox\"><input type=\"checkbox\" v-model=\"newPerson.isDeceased\"></div></p> <!-- Is deceased -->\n                <p v-if=\"newPerson.isDeceased\">Miršanas datums: <input v-model=\"newPerson.dod\" type=\"date\" /></p> <!-- Date of death -->\n                <p v-if=\"currentNewPersonType == 'child'\"><label for=\"parents\">Izvēlieties otru vecāku:</label></p> <!-- Select second parent -->\n                <p v-if=\"currentPID && currentNewPersonType == 'child'\">\n                    <select name=\"parents\" id=\"parents\" v-model=\"newPerson.primaryParents[0]\">\n                        <option :value=\"-1\" :selected=\"true\">Adoptēts</option>\n                        <option v-for=\"parentID in getPerson(currentPID).spouses\" :value=\"parentID\">\n                            {{ getPerson(parentID).name }}\n                        </option>\n                    </select>\n                </p>\n\n                <!-- Articles -->\n                <h3>Raksti:</h3>\n                <div v-for=\"article, i in newPerson.articles\">\n                    <p>Virsraksts: <input v-model=\"article.title\" type=\"text\" /></p>\n                    <p><textarea class=\"desc\" v-model=\"article.content\"></textarea></p>\n                    <button class=\"hover-up-p\" style=\"margin: 3pt 0;\" @click=\"removeArticle(newPerson, i)\">\n                        <p>Noņemt rakstu</p>\n                        <div class=\"bg red op-30\"></div>\n                    </button>\n                </div>\n\n                <!-- Add article -->\n                <button class=\"hover-up-p\" style=\"margin: 4pt 0;\" @click=\"addArticle(newPerson)\">\n                    <p>Pievienot rakstu</p>\n                    <div class=\"bg\"></div>\n                </button>\n\n                <button class=\"hover-up-p\" style=\"float: inline-end;\" @click=\"(currentNewPersonType == 'child')?addChild():((currentNewPersonType == 'parent')?addParent():addSpouse())\">\n                    <p>PIEVIENOT</p>\n                    <div class=\"bg op-40\"></div>\n                </button>\n            </div>\n\n            <!-- Exit -->\n            <button class=\"exit-button hover-up-p pos-right-inline\" @click=\"closePersonInfo()\">\n                <p>Aizvērt</p>\n                <div class=\"bg accent\"></div>\n            </button>\n        </div>\n\n        <!-- UPDATE TREE -->\n        <button class=\"exit-button hover-up-p\" v-if=\"tree.people.length != 0\" @click=\"updateTree()\">\n            <p>Saglabāt koku</p>\n            <div class=\"bg accent\"></div>\n        </button>\n\n        <!-- Confirm person removal -->\n        <div class=\"confirm-person-remove\" v-bind:class=\"(removePID)?'shown-0--50':''\">\n            <h2>Vai jūs esat drošs?</h2>\n            <button v-if=\"removePID\" class=\"hover-up-p\" @click=\"closePersonInfo()\">\n                <p>Nē</p>\n                <div class=\"bg secondary op-80 z--3\"></div>\n            </button>\n            <button v-if=\"removePID\" class=\"hover-up-p\" @click=\"removePerson(removePID)\">\n                <p>Jā</p>\n                <div class=\"bg red op-80 z--3\"></div>\n            </button>\n            <button v-if=\"removePID\" class=\"hover-up-p\" @click=\"closePersonInfo()\">\n                <p>Nē</p>\n                <div class=\"bg secondary op-80 z--3\"></div>\n            </button>\n            <div class=\"bg op-30 z--5\"></div>\n        </div>\n\n        <!-- Error mesasge -->\n        <div class=\"error-message z-10\" :style=\"(errorMsg.length > 0)?'':'transform: translateX(-50%) translateY(calc(100% + 20pt))'\">\n            <p>{{ errorMsg }}</p>\n            <div class=\"bg red op-40\"></div>\n        </div>\n       \n        <!--  IF NO PERSON EXISTS -->\n        <!-- Add new person form -->\n        <div class=\"add-person-container\" v-if=\"tree.people.length == 0\">\n            <h2>Pievienot personu</h2>\n            <p>Vārds: <input type=\"text\" v-model=\"newPerson.name\"></p>\n            <p>Dzimšanas datums: <input type=\"date\" v-model=\"newPerson.dob\"></p>\n            <p>Vai ir miris? <div class=\"checkbox\"><input type=\"checkbox\" v-model=\"newPerson.isDeceased\"></div></p> <!-- Is deceased -->\n            <p v-if=\"newPerson.isDeceased\">Miršanas datums: <input type=\"date\" v-model=\"newPerson.dod\"></p>\n            <button class=\"hover-up-p\" @click=\"addPerson(newPerson)\">\n                <p>Izveidot personu</p>\n            </button>\n\n            <div class=\"bg\"></div>\n        </div>\n    </div>\n</template>\n\n<style scoped lang=\"scss\">\n    @import \"../assets/css/tree.scss\";\n    @import \"../assets/css/base.scss\";\n    @import \"../assets/css/colors.scss\";\n</style>","import script from \"./TreeView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TreeView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TreeView.vue?vue&type=style&index=0&id=49c904bc&scoped=true&lang=scss\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-49c904bc\"]])\n\nexport default __exports__"],"names":["exports","sfc","props","target","__vccOpts","key","val","personPointer","constructor","person","before","isSpouse","this","tPersonMarginH","tPersonMarginV","tPersonWidth","tPersonHeight","tPersonPaddingH","tPersonPaddingV","errorMsgDurationMlsc","router","useRouter","tid","currentRoute","value","params","id","clamp","num","min","max","Math","offsetX","ref","ftreePoses","personFormat","structuredClone","defaultTreePerson","currentPID","biggestPID","auth","getAuth","tree","getTree","async","console","log","treeDoc","getDoc","doc","db","exists","data","people","forEach","refreshTree","alert","back","updateTree","formattedTree","updateDoc","then","showError","catch","getPerson","ID","arr","push","find","p","getDepth","startPerson","depth","peopleToCheck","checkedPeople","peoplePointers","failsafe","length","checkPeople","parents","parent","pdepth","tracePerson","pointer","includes","spouses","spouse","treeDepth","calcTreeDepth","ftree","makeTree","i","sortGen","pid","layer","index","x","y","calcTreeWidth","closePersonInfo","newFTree","lastGen","gen","last","checkedIDs","spuose","families","j","primPers","primaryParents","s","familyIndex","findIndex","f","floor","splice","newPerson","addPerson","personObj","name","removePID","removePerson","primParent","children","child","indexOf","error","confirmEdit","editedPerson","adddingPerson","selectNewPersonType","currentNewPersonType","addPersonFromType","type","addChild","spouseID","addSpouse","addParent","addArticle","articles","defaultPersonArticle","removeArticle","selectedPerson","personIsSelected","showPersonInfo","editingPerson","editPerson","setPersonPosV","pos","setPersonPosH","treeWidthPt","getPersonPos","errorMsg","errorMessage","setTimeout","hasAccess","checkAccess","userDoc","currentUser","uid","trees","lastX","mouseDown","window","onmousedown","onmouseup","handleMouseMove","event","screenX","dx","onMounted","document","title","onmousemove","__exports__"],"sourceRoot":""}