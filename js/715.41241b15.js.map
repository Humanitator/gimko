{"version":3,"file":"js/715.41241b15.js","mappings":"qGAIAA,EAAQ,EAAU,CAACC,EAAKC,KACpB,MAAMC,EAASF,EAAIG,WAAaH,EAChC,IAAK,MAAOI,EAAKC,KAAQJ,EACrBC,EAAOE,GAAOC,EAElB,OAAOH,CAAM,C,qgCCDb,MAAMI,GAASC,EAAAA,EAAAA,MAGTC,GAAWC,EAAAA,EAAAA,IAAI,IACfC,GAAYD,EAAAA,EAAAA,IAAI,KAChBE,EAAWC,UAEb,MAAMC,GAAOC,EAAAA,EAAAA,MACPC,GAAUC,EAAAA,EAAAA,IAAIC,EAAAA,EAAI,QAASJ,EAAKK,YAAYC,KAC5CC,QAAgBC,EAAAA,EAAAA,IAAON,GAC7B,GAAIK,EAAQE,SAAU,CAElB,MAAMC,EAAUH,EAAQI,OAAOC,MAC/Bf,EAAUgB,MAAQH,EAAQI,aAEpBJ,EAAQK,SAAQhB,UAClBiB,QAAQC,IAAI,yBAA2BC,GACvC,MAAMC,QAAgBX,EAAAA,EAAAA,KAAOL,EAAAA,EAAAA,IAAIC,EAAAA,EAAI,QAASc,IAE1CC,EAAQV,UACRO,QAAQC,IAAI,eACZtB,EAASkB,MAAMO,KAAKD,IAEpBH,QAAQC,IAAI,kBAChB,GAER,MAEID,QAAQC,IAAI,wBAChB,EAIEI,GAAezB,EAAAA,EAAAA,KAAI,GACnB0B,GAAc1B,EAAAA,EAAAA,IAAI,cAClB2B,EAAaxB,UACf,MAAMC,GAAOC,EAAAA,EAAAA,MACboB,EAAaR,OAAQ,EACK,KAAtBS,EAAYT,QACZS,EAAYT,MAAQ,cAGxB,MAAMW,GAAaC,EAAAA,EAAAA,IAAWrB,EAAAA,EAAI,SAE5BsB,GAAIC,EAAAA,EAAAA,IAAMH,GAAYI,EAAAA,EAAAA,IAAM,OAAQ,KAAMN,EAAYT,QACtDlB,QAAiBkC,EAAAA,EAAAA,IAAQH,GAC/B,IAAK/B,EAASmC,MAEV,YADAC,MAAM,yBAKV,MAAMC,EAAUC,gBAAgBC,EAAAA,IAChCF,EAAQG,KAAOb,EAAYT,MAC3BmB,EAAQI,QAAUpC,EAAKK,YAAYC,IAEnC,MAAM+B,QAAgBC,EAAAA,EAAAA,IAAOd,EAAYQ,GAGnC9B,GAAUC,EAAAA,EAAAA,IAAIC,EAAAA,EAAI,QAASJ,EAAKK,YAAYC,KAC5CC,QAAgBC,EAAAA,EAAAA,IAAON,GAEzBK,EAAQE,gBACF8B,EAAAA,EAAAA,IAAUrC,EAAS,CACrBU,MAAO,IAAIL,EAAQI,OAAOC,MAAOyB,EAAQG,MAE7C/C,EAAOgD,MAGPzB,QAAQC,IAAI,wBAChB,EAIEyB,EAAYC,IACdlD,EAAO2B,KAAK,CAAEe,KAAM,OAAQS,OAAQ,CAAEJ,GAAIG,IAAK,E,OAGnDE,EAAAA,EAAAA,KAAU,KACNC,SAASC,MAAQ,eACjBjD,GAAU,I,k3BClFlB,MAAMkD,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://gimko/./node_modules/vue-loader/dist/exportHelper.js","webpack://gimko/./src/views/TreeMain.vue","webpack://gimko/./src/views/TreeMain.vue?c09a"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n","<script setup>\n    import { onMounted, ref } from 'vue';\n    import { getAuth } from 'firebase/auth';\n    import db from \"../firebase/init.js\";\n    import { defaultTree } from \"../firebase/defaultStructs\"\n    import { doc, addDoc, setDoc, getDoc, getDocs, query, collection, updateDoc, where } from \"firebase/firestore\";\n    import { useRouter } from 'vue-router';\n\n    const router = useRouter();\n\n    // Get trees\n    const treeDocs = ref([]); // Tree documents\n    const treeCount = ref(1000);\n    const getTrees = async () => {\n        // Get user\n        const auth = getAuth();\n        const userRef = doc(db, \"users\", auth.currentUser.uid);\n        const userDoc = await getDoc(userRef);\n        if (userDoc.exists()) {\n            // Get tree id's\n            const treeIDs = userDoc.data().trees;\n            treeCount.value = treeIDs.length;\n            // Get trees\n            await treeIDs.forEach(async (tid) => {\n                console.log('Getting tree with ID: ' + tid);\n                const treeDoc = await getDoc(doc(db, 'trees', tid));\n                // Check if exists\n                if (treeDoc.exists()) {\n                    console.log(\"Found tree!\");\n                    treeDocs.value.push(treeDoc);\n                } else {\n                    console.log(\"Tree not found!\")\n                }\n            });\n        } else {\n        // docSnap.data() will be undefined in this case\n            console.log(\"No document for user!\");\n        }\n    };\n\n    // Create a new tree\n    const creatingTree = ref(false);\n    const newTreeName = ref(\"Jauns koks\");\n    const createTree = async () => {\n        const auth = getAuth();\n        creatingTree.value = true;\n        if (newTreeName.value === \"\") {\n            newTreeName.value = \"Jauns koks\";\n        }\n\n        const treeColRef = collection(db, 'trees');\n        // Check if tree exists\n        const q = query(treeColRef, where('name', '==', newTreeName.value));\n        const treeDocs = await getDocs(q);\n        if (!treeDocs.empty) {\n            alert(\"Šāds koks jau pastāv!\");\n            return;\n        }\n\n        // Make new tree\n        const treeObj = structuredClone(defaultTree);\n        treeObj.name = newTreeName.value;\n        treeObj.ownerID = auth.currentUser.uid;\n\n        const treeRef = await addDoc(treeColRef, treeObj);\n\n        // Get user trees\n        const userRef = doc(db, \"users\", auth.currentUser.uid);\n        const userDoc = await getDoc(userRef);\n\n        if (userDoc.exists()) {\n            await updateDoc(userRef, {\n                trees: [...userDoc.data().trees, treeRef.id],\n            });\n            router.go(); // Reload page\n        } else {\n        // docSnap.data() will be undefined in this case\n            console.log(\"No document for user!\");\n        }\n    };\n\n    // Load a tree\n    const loadTree = (ID) => {\n        router.push({ name: \"tree\", params: { id: ID}})\n    };\n\n    onMounted(() => {\n        document.title = \"gimko | Koki\";\n        getTrees();\n    });\n</script>\n\n<template>\n    <h1>Koki</h1>\n\n    <!-- Render placeholders while retrieving data from firebase -->\n    <div v-if=\"treeDocs.length != treeCount\">\n        <div class=\"tree-list-container\">\n            <div class=\"tree-selector\">\n                <div class=\"tree-button hover-up\" v-for=\"i in Array(5).keys()\">\n                    <div class=\"bg op-20\"></div>\n                </div>\n            </div>\n            <div class=\"bg\"></div>\n        </div>\n\n        <div class=\"new-tree-container\">\n            <div class=\"bg\"></div>\n        </div>\n    </div>\n\n    <!-- If tree docs -->\n    <div v-if=\"treeDocs.length == treeCount\">\n    \n        <div class=\"tree-list-container\">\n            <div class=\"tree-selector\">\n                <button class=\"tree-button hover-up-p\" @click=\"loadTree(treeDoc.id)\" v-for=\"treeDoc in treeDocs\">\n                    <p>{{ treeDoc.data().name }}</p>\n                    <div class=\"bg op-20\"></div>\n                </button>\n            </div>\n            <div class=\"bg\"></div>\n        </div>\n    \n        <div class=\"new-tree-container\">\n            <h2>Izveidot Jaunu Koku</h2>\n            <p>Nosaukums:</p>\n            <p><input type=\"text\" v-model=\"newTreeName\" placeholder=\"New tree\"></p>\n    \n            <button v-if=\"!creatingTree\" class=\"hover-up-p\" @click=\"createTree()\">\n                <p>Izveidot Koku</p>\n            </button>\n\n            <div class=\"bg\"></div>\n        </div>\n    </div>\n</template>\n\n<style scoped lang=\"scss\">\n    @import \"../assets/css/treeMain.scss\";\n</style>","import script from \"./TreeMain.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TreeMain.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./TreeMain.vue?vue&type=style&index=0&id=62ab4d38&scoped=true&lang=scss\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-62ab4d38\"]])\n\nexport default __exports__"],"names":["exports","sfc","props","target","__vccOpts","key","val","router","useRouter","treeDocs","ref","treeCount","getTrees","async","auth","getAuth","userRef","doc","db","currentUser","uid","userDoc","getDoc","exists","treeIDs","data","trees","value","length","forEach","console","log","tid","treeDoc","push","creatingTree","newTreeName","createTree","treeColRef","collection","q","query","where","getDocs","empty","alert","treeObj","structuredClone","defaultTree","name","ownerID","treeRef","addDoc","updateDoc","id","go","loadTree","ID","params","onMounted","document","title","__exports__"],"sourceRoot":""}