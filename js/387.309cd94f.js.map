{"version":3,"file":"js/387.309cd94f.js","mappings":"+lBAcI,MAAMA,GAAWC,EAAAA,EAAAA,IAAI,IACfC,GAAQD,EAAAA,EAAAA,IAAI,IACZE,GAAWF,EAAAA,EAAAA,IAAI,IAEfG,GAASC,EAAAA,EAAAA,MACTC,GAAWL,EAAAA,EAAAA,MAGXM,EAAgBC,UAElB,MAAMC,EAAe,iBAErB,GAAIT,EAASU,MAAMC,OAAS,GAAKX,EAASU,MAAMC,QAAU,GAGtD,OAFAL,EAASI,MAAQ,iDACjBE,EAAYF,OAAQ,GACb,EACJ,IAAKD,EAAaI,KAAKb,EAASU,OAGnC,OAFAJ,EAASI,MAAQ,wDACjBE,EAAYF,OAAQ,GACb,EAIX,MAAMI,QAAqBC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,EAAI,QAASjB,EAASU,QAC5D,OAAII,EAAaI,WACbZ,EAASI,MAAQ,iCACjBE,EAAYF,OAAQ,GACb,EAGA,EAGTE,GAAcX,EAAAA,EAAAA,KAAI,GAClBkB,EAAWA,KACbP,EAAYF,OAAQ,EACpBU,QAAQC,IAAI,kBAEZ,MAAMC,GAAOC,EAAAA,EAAAA,MAEbhB,IACCiB,MAAOC,IACJ,IAAKA,EAID,OAFAL,QAAQC,IAAI,2BACZT,EAAYF,OAAQ,GAGxBU,QAAQC,IAAI,oBAEZK,EAAAA,EAAAA,IAA+BJ,EAAMpB,EAAMQ,MAAOP,EAASO,OAC1Dc,MAAKhB,UACFY,QAAQC,IAAI,kCAGNM,EAAAA,EAAAA,KAAOX,EAAAA,EAAAA,IAAIC,EAAAA,EAAI,QAASW,EAAKC,KAAKC,KAAMC,gBAAgBC,EAAAA,KAG9D5B,EAAO6B,KAAK,IAAI,IAEnBC,OAAOC,IAEJ,OADAf,QAAQC,IAAIc,EAAMC,MACVD,EAAMC,MACV,IAAK,qBACD9B,EAASI,MAAQ,oBACjB,MACJ,IAAK,sBACDJ,EAASI,MAAQ,uCACjB,MACJ,IAAK,sBACDJ,EAASI,MAAQ,oBACjB,MACJ,IAAK,wBACDJ,EAASI,MAAQ,eACjB,MACJ,IAAK,4BACDJ,EAASI,MAAQ,2BACjB,MACJ,QACIJ,EAASI,MAAQ,gEACjB,MAERE,EAAYF,OAAQ,CAAK,GAC3B,GACJ,EAIA2B,EAAmB7B,UAGrB,GAFAI,EAAYF,OAAQ,QAEVH,IAAiB,CACvB,MAAM+B,EAAW,IAAIC,EAAAA,GACfC,QAAeC,EAAAA,EAAAA,KAAgBlB,EAAAA,EAAAA,MAAWe,GAG1CI,QAAa3B,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,EAAI,QAASuB,EAAOX,KAAKC,MACvD,IAAKY,EAAKxB,SAAU,CAChB,IAAIW,EAAOE,gBAAgBC,EAAAA,IAC3BH,EAAK7B,SAAWA,EAASU,YACnBiB,EAAAA,EAAAA,KAAOX,EAAAA,EAAAA,IAAIC,EAAAA,EAAI,QAASuB,EAAOX,KAAKC,KAAMD,EACpD,CAEAzB,EAAO6B,KAAK,IAChB,G,OAGJU,EAAAA,EAAAA,KAAU,KACNC,SAASC,MAAQ,sBAAsB,I,82BCrH/C,MAAMC,EAAc,EAEpB,O","sources":["webpack://gimko/./src/views/Register.vue","webpack://gimko/./src/views/Register.vue?157d"],"sourcesContent":["<script setup>\n    import { onMounted, ref } from 'vue';\n    import db from \"../firebase/init.js\"\n    import {\n        getAuth,\n        createUserWithEmailAndPassword,\n        GoogleAuthProvider,\n        signInWithPopup,\n    } from \"firebase/auth\";\n    import { doc, collection, addDoc, setDoc, getDoc} from \"firebase/firestore\"\n    import { useRouter } from 'vue-router';\n    import { async } from '@firebase/util';\n    import { defaultUser } from '@/firebase/defaultStructs';\n\n    const username = ref(\"\");\n    const email = ref(\"\");\n    const password = ref(\"\");\n\n    const router = useRouter(); // Get a refrence to router\n    const errorMsg = ref();\n\n    // Check if username is in use\n    const checkUsername = async () => {\n        // Check if username is valid\n        const regexPattern = /^[a-zA-Z0-9]+$/; // Allows only letters and numbers\n\n        if (username.value.length < 3 || username.value.length >= 16) {\n            errorMsg.value = \"Lietotājvārdam jābūt no 3 līdz 16 burtu garam!\";\n            registering.value = false;\n            return false;\n        } else if (!regexPattern.test(username.value)) {\n            errorMsg.value = \"Lietotājvārdam jāsastāv tikai no burtiem un cipariem!\";\n            registering.value = false;\n            return false;\n        }\n\n        // Check if username exists\n        const existingUser = await getDoc(doc(db, \"users\", username.value));\n        if (existingUser.exists()) {\n            errorMsg.value = \"Lietotājvārds jau ir aizņemts!\"\n            registering.value = false;\n            return false;\n        }\n\n        return true;\n    };\n\n    const registering = ref(false);\n    const register = () => {\n        registering.value = true;\n        console.log(\"Registering...\");\n        // Need .value because ref()\n        const auth = getAuth();\n        // Validate username\n        checkUsername()\n        .then( (isValid) => {\n            if (!isValid) {\n                // Username is not valid\n                console.log(\"Username not valid\");\n                registering.value = false\n                return\n            }\n            console.log(\"Username valid!\");\n            // Create user\n            createUserWithEmailAndPassword(auth, email.value, password.value)\n            .then(async (data) => {\n                console.log(\"Successfully registered!\");\n                // console.log(\"Id\" + data.user.uid);\n                // Add user to database\n                await setDoc(doc(db, 'users', data.user.uid), structuredClone(defaultUser));\n\n                // Move user to home\n                router.push('/');\n            })\n            .catch((error) => {\n                console.log(error.code);\n                switch (error.code) {\n                    case \"auth/invalid-email\":\n                        errorMsg.value = \"Nederīgs ē-pasts!\";\n                        break;\n                    case \"auth/user-not-found\":\n                        errorMsg.value = \"Netika atrasts konts ar tādu ēpastu!\";\n                        break\n                    case \"auth/wrong-password\":\n                        errorMsg.value = \"Nepareiza parole!\";\n                        break;\n                    case \"auth/missing-password\":\n                        errorMsg.value = \"Nav paroles!\";\n                        break\n                    case \"auth/email-already-in-use\":\n                        errorMsg.value = \"Ēpasts jau tiek lietots!\";\n                        break;\n                    default:\n                        errorMsg.value = \"Kaut kas nogāja greizi. Mēģiniet nomainīt ē-pastu vai paroli.\";\n                        break;\n                }\n                registering.value = false;\n            });\n        });\n    };\n\n    // Sign in with google\n    const signInWithGoogle = async () => {\n        registering.value = true;\n\n        if (await checkUsername()) {\n            const provider = new GoogleAuthProvider();\n            const result = await signInWithPopup(getAuth(), provider);\n            // console.log(result.user);\n            // Check if user exists\n            const uDoc = await getDoc(doc(db, 'users', result.user.uid));\n            if (!uDoc.exists()) { // Make user if doesn't exist\n                let user = structuredClone(defaultUser);\n                user.username = username.value;\n                await setDoc(doc(db, 'users', result.user.uid), user);\n            };\n\n            router.push(\"/\");\n        }\n    };\n\n    onMounted(() => {\n        document.title = \"gimko | Reģistrēties\";\n    });\n</script>\n\n<template>\n    <h1>Izveidot Kontu</h1>\n\n    <article>\n        <p><input type=\"text\" placeholder=\"Lietotājvārds\" v-model=\"username\"/></p>\n        <p><input type=\"text\" placeholder=\"Ē-pasts\" v-model=\"email\"/></p>\n        <p><input type=\"password\" placeholder=\"Parole\" v-model=\"password\"/></p>\n        <p v-if=\"errorMsg\">{{ errorMsg }}</p>\n        <p v-if=\"!registering\">\n            <button class=\"hover-up-p\" @click=\"register()\">\n                <p>Iesniegt</p>\n                <div class=\"bg\"></div>\n            </button>\n        </p>\n\n        <p v-if=\"!registering\">\n            <button class=\"hover-up-p\" @click=\"signInWithGoogle()\">\n                <p>Pievienoties ar Google</p>\n                <div class=\"bg accent\"></div>\n            </button>\n        </p>\n        <div class=\"bg\"></div>\n    </article>\n</template>\n\n<style lang=\"scss\">\n     @import '../assets/css/signIn.scss';\n</style>","import script from \"./Register.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Register.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Register.vue?vue&type=style&index=0&id=6d67c973&lang=scss\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["username","ref","email","password","router","useRouter","errorMsg","checkUsername","async","regexPattern","value","length","registering","test","existingUser","getDoc","doc","db","exists","register","console","log","auth","getAuth","then","isValid","createUserWithEmailAndPassword","setDoc","data","user","uid","structuredClone","defaultUser","push","catch","error","code","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","uDoc","onMounted","document","title","__exports__"],"sourceRoot":""}